#!/usr/bin/env python

# full width horizontal bar at top to search
# left column with current results: name, mod date, summary, tags
# right column with text of currently selected note

# http://www.scribd.com/doc/91277952/Simple-Note-API-v2-1-3
# this also has a sync algorithm!

# json.dump can nicely dump file to disk

import ConfigParser
from notes_db import NotesDB
import os
from simplenote import Simplenote
import sys
import view

class Config:
    def __init__(self, cfg_fname, defaults):
        # allow_no_value=True means we'll just get None for undefined values
        cp = ConfigParser.SafeConfigParser(defaults, allow_no_value=True)
        cp.read(cfg_fname)
        self.sn_username = cp.get('default', 'sn_username')
        self.sn_password = cp.get('default', 'sn_password')
        self.db_path = cp.get('default', 'db_path')

class Controller:
    """Main application class.
    """
    
    def __init__(self):
        # setup appdir
        if hasattr(sys, 'frozen') and sys.frozen:
            self._appdir, exe = os.path.split(sys.executable)
        else:
            dirname = os.path.dirname(sys.argv[0])
            if dirname and dirname != os.curdir:
                self._appdir = dirname
            else:
                self._appdir = os.getcwd()
        
        # create the interface
        self.view = view.View(self)
        
        # should probably also look in $HOME
        self.config = Config(os.path.join(self.get_appdir(), 'nvPY.cfg'))
        
        # read our database of notes into memory
        # and sync with simplenote.
        self.notes_db = NotesDB(self.config.db_path, self.config.sn_username, self.config.sn_password)
        
        #
        
    def get_appdir(self):
        return self._appdir

    def get_resdir(self):
        return os.path.join(self.get_appdir(), 'resources')
    
    def get_version(self):
        return "0.2"

    def quit(self):
        self.view.close()
        
    def main_loop(self):
        self.view.main_loop()


def main():
    controller = Controller()
    controller.main_loop()
    

if __name__ == '__main__':
    main()

